1.Design a star schema using SQL queries for a multidimensional data model.
-- Create the tables
CREATE TABLE Product1 (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

CREATE TABLE Customer1 (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50)
);

CREATE TABLE salestable (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    Quantity INT,
    Amount DECIMAL(10, 2),
    SaleType VARCHAR(50), -- New column
    FOREIGN KEY (ProductID) REFERENCES Product1(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Customer1(CustomerID)
);
-- inserting the values
-- Insert single values into Product table
INSERT INTO Product1 (ProductID, ProductName) VALUES (1, 'Product A');

-- Insert single values into Customer table
INSERT INTO Customer1 (CustomerID, CustomerName) VALUES (1, 'Customer X');

-- Insert single values into sales_1 table
INSERT INTO salestable (SaleID, ProductID, CustomerID, Quantity, Amount, SaleType) 
VALUES (1, 1, 1, 10, 100.00, 'Online');

--some queries for showing values

--Query for Total Sales Amount by Product:
SELECT p.ProductName, SUM(s.Amount) AS TotalAmount
FROM salestable s
JOIN Product1 p ON s.ProductID = p.ProductID
GROUP BY p.ProductName;

--Query for Total Sales Quantity by Customer:
SELECT c.CustomerName, SUM(s.Quantity) AS TotalQuantity
FROM salestable s
JOIN Customer1 c ON s.CustomerID = c.CustomerID
GROUP BY c.CustomerName;
--Query for Total Sales Amount by Sale Type:
SELECT SaleType, SUM(Amount) AS TotalAmount
FROM salestable
GROUP BY SaleType;
--Query for Sales Details for a Specific Product:
SELECT *
FROM salestable
WHERE ProductID = 1;

2. Design a snowflake schema using SQL queries for a multidimensional data model.
-- Create dimension tables
CREATE TABLE Product2 (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

CREATE TABLE Customer2 (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50)
);

CREATE TABLE Location2 (
    LocationID INT PRIMARY KEY,
    City VARCHAR(50),
    State VARCHAR(50)
);
--Create fact table
CREATE TABLE salestable2 (
    SaleID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    LocationID INT,
    Quantity INT,
    Amount DECIMAL(10, 2),
    FOREIGN KEY (ProductID) REFERENCES Product2(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Customer2(CustomerID),
    FOREIGN KEY (LocationID) REFERENCES Location2(LocationID)
);
--inserting values into the table

-- Insert single values into Product table
INSERT INTO Product2 (ProductID, ProductName) VALUES (1, 'Product A');

-- Insert single values into Customer table
INSERT INTO Customer2 (CustomerID, CustomerName) VALUES (1, 'Customer X');

-- Insert single values into Location table
INSERT INTO Location2(LocationID, City, State) VALUES (1, 'City A', 'State X');

-- Insert single values into Sales table
INSERT INTO salestable2(SaleID, ProductID, CustomerID, LocationID, Quantity, Amount) 
VALUES (1, 1, 1, 1, 10, 100.00);
--queries
--Query for Total Sales Amount by Product:
SELECT p.ProductName, SUM(s.Amount) AS TotalAmount
FROM salestable2 s
JOIN Product2 p ON s.ProductID = p.ProductID
GROUP BY p.ProductName;
--Query for Total Sales Quantity by Customer:
SELECT c.CustomerName, SUM(s.Quantity) AS TotalQuantity
FROM salestable2 s
JOIN Customer2 c ON s.CustomerID = c.CustomerID
GROUP BY c.CustomerName;
--Query for Total Sales Amount by Location:
SELECT l.City, l.State, SUM(s.Amount) AS TotalAmount
FROM salestable2 s
JOIN Location2 l ON s.LocationID = l.LocationID
GROUP BY l.City, l.State;
--Query for Sales Details for a Specific Product and Customer:
SELECT s.SaleID, s.Quantity, s.Amount
FROM salestable2 s
JOIN Product2 p ON s.ProductID = p.ProductID
JOIN Customer2 c ON s.CustomerID = c.CustomerID
WHERE p.ProductName = 'Product A' AND c.CustomerName = 'Customer X';


3.	Design a fact constellation schema using SQL queries for a multidimensional data model.

-- Create dimension tables
CREATE TABLE Product3 (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

CREATE TABLE Location3 (
    LocationID INT PRIMARY KEY,
    City VARCHAR(50),
    State VARCHAR(50)
);

-- Create fact tables
CREATE TABLE Sales3(
    SaleID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    Amount DECIMAL(10, 2),
    FOREIGN KEY (ProductID) REFERENCES Product3(ProductID)
);

CREATE TABLE Inventory3 (
    InventoryID INT PRIMARY KEY,
    ProductID INT,
    LocationID INT,
    Quantity INT,
    FOREIGN KEY (ProductID) REFERENCES Product3(ProductID),
    FOREIGN KEY (LocationID) REFERENCES Location3(LocationID)
);
--inserting values
-- Insert single values into Product table
INSERT INTO Product3 (ProductID, ProductName) VALUES (1, 'Product A');

-- Insert single values into Location table
INSERT INTO Location3 (LocationID, City, State) VALUES (1, 'City A', 'State X');

-- Insert single values into Sales table
INSERT INTO Sales3 (SaleID, ProductID, Quantity, Amount) 
VALUES (1, 1, 10, 100.00);

-- Insert single values into Inventory table
INSERT INTO Inventory3(InventoryID, ProductID, LocationID, Quantity) 
VALUES (1, 1, 1, 50);
--queries
--Query for Total Sales Amount by Product:
SELECT p.ProductName, SUM(s.Amount) AS TotalAmount
FROM Sales3 s
JOIN Product3 p ON s.ProductID = p.ProductID
GROUP BY p.ProductName;
--Query for Total Inventory Quantity by Location:

SELECT l.City, l.State, SUM(i.Quantity) AS TotalQuantity
FROM Inventory3 i
JOIN Location3 l ON i.LocationID = l.LocationID
GROUP BY l.City, l.State;
--Query for Sales Details for a Specific Product:

SELECT s.SaleID, s.Quantity, s.Amount
FROM Sales3 s
JOIN Product3 p ON s.ProductID = p.ProductID
WHERE p.ProductName = 'Product A';
--Query for Inventory Details for a Specific Location:

SELECT i.InventoryID, i.Quantity
FROM Inventory3 i
JOIN Location3 l ON i.LocationID = l.LocationID
WHERE l.City = 'City A' AND l.State = 'State X';

4.	Implement Rollup operation on a multidimensional data model using SQL queries.
CREATE TABLE Sales (
    Region VARCHAR(50),
    Country VARCHAR(50),
    Product VARCHAR(50),
    Revenue DECIMAL(10, 2)
);

INSERT INTO Sales (Region, Country, Product, Revenue) VALUES
('Region1', 'Country1', 'Product1', 1000);
--enter some other values

rollup:
SELECT 
    Region,
    Country,
    Product,
    SUM(Revenue) AS TotalRevenue
FROM 
    Sales
GROUP BY 
    ROLLUP (Region, Country, Product);

5.	Implement Cube operation on a multidimensional data model using SQL queries.
CREATE TABLE Sales (
    Region VARCHAR(50),
    Country VARCHAR(50),
    Product VARCHAR(50),
    Revenue DECIMAL(10, 2)
);

INSERT INTO Sales (Region, Country, Product, Revenue) VALUES
('Region1', 'Country1', 'Product1', 1000);
--enter some other values

--cube:
SELECT 
    Region,
    Country,
    Product,
    SUM(Revenue) AS TotalRevenue
FROM 
    Sales
GROUP BY 
    CUBE (Region, Country, Product);
7.	Implement GROUPING SETS operations on a multidimensional data model using SQL queries.

CREATE TABLE Sales1 (
    Region VARCHAR(50),
    Product VARCHAR(50),
    Amount DECIMAL(10, 2)
);
INSERT INTO Sales1 (Region, Product, Amount) VALUES 
('North', 'Product_A', 100);
--enter some other values
--Grouping:
SELECT
 Region, 
Product,
 SUM(Amount) AS TotalSales
FROM 
Sales1
GROUP BY GROUPING SETS ((Region, Product), (Region), ());

9.	Implement concatened grouping operations on a multidimensional data model using SQL queries.


CREATE TABLE  sales_data (
    ProductName VARCHAR(50),
    Region VARCHAR(50), -- New column for the region
    Quantity INT,
    Amount DECIMAL(10, 2)
);
-- Insert sample data
INSERT INTO sales_data (ProductName, Region, Quantity, Amount) VALUES
('Product A', 'Region 1', 10, 100.00);

-- Perform concatenated grouping operation
SELECT 
    ProductName,
    Region,
    SUM(Quantity) AS TotalQuantity,
    SUM(Amount) AS TotalAmount
FROM 
    sales_data
GROUP BY 
    ProductName,
    Region
ORDER BY 
    ProductName,
    Region;

12.	Implement GROUPING SETS operations on a multidimensional data model using SQL queries.

-- Create the tables with changed names
CREATE TABLE Items (
    ItemID INT PRIMARY KEY,
    ItemName VARCHAR(50)
);

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    ItemID INT,
    Quantity INT,
    Amount DECIMAL(10, 2),
    FOREIGN KEY (ItemID) REFERENCES Items(ItemID)
);

-- Insert a single value into Items
INSERT INTO Items (ItemID, ItemName) VALUES (1, 'Item A');
-- Insert a single value into Orders
INSERT INTO Orders (OrderID, ItemID, Quantity, Amount) VALUES (1, 1, 5, 50.00);


-- Perform GROUPING SETS operation
SELECT
    ItemName,
    SUM(Quantity) AS TotalQuantity,
    SUM(Amount) AS TotalAmount
FROM
    Items
JOIN
    Orders USING (ItemID)
GROUP BY
    GROUPING SETS((ItemName), (ItemName));

